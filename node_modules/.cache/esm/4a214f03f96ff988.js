let cron,execute,makePromise,HttpLink,gql;_f96‍.w("node-cron",[["default",["cron"],function(v){cron=v}]]);_f96‍.w("apollo-link",[["execute",["execute"],function(v){execute=v}],["makePromise",["makePromise"],function(v){makePromise=v}]]);_f96‍.w("apollo-link-http",[["HttpLink",["HttpLink"],function(v){HttpLink=v}]]);_f96‍.w("graphql-tag",[["default",["gql"],function(v){gql=v}]]);require('dotenv').config()





//const uri = 'http://localhost:4000/';
const uri = process.env.GRAPHQL_SERVER

const link = new HttpLink({
  uri: uri
});

const currentMinute = new Date()
const currentMinute1 = currentMinute
currentMinute1.setMinutes(currentMinute1.getMinutes() + 1)

const noAnswerQuery = gql`
query {
  questions(where:{questionAnswers_every:{id:""}}){
    count
    questions{
      id
      question
      questionAnswers{
        id
      }
      test{
        id
        subject
        testNumber
        course{
          name
          institution{
            name
          }
        }
      }
      sentTo{
        id
        pushToken
        firstName
        lastName
        email
      }
    }
  }
}
`

const operation = {
  query: noAnswerQuery,
  variables: {} //optional
};
console.log('running now');
cron.schedule('* * * * *', () => {

  console.log('running a task every minute');

// select expiring question for current minute

  makePromise(execute(link, operation))
    .then(resp => {
      const questions = resp.data.questions.questions
      //console.log(`received data ${JSON.stringify(questions, null, 2)}`)

      questions.forEach(item => {
          _f96‍.g.console.log(item.question,item.sentTo.pushToken)
        })
})
.catch(error => console.log(`received error ${error}`))

// send notifications to expo sd
})
